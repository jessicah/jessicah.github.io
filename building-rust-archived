Building Rust: Archived Notes
=============================

We'll set up our system, doing everything relative to scratch:
```
mkdir -p $HOME/scratch
export SCRATCH=$HOME/scratch
cd $SCRATCH
```

First, we need to build our cross-compiler:
```
git clone https://github.com:/haiku/haiku.git
git clone https://github.com:/haiku/buildtools.git
wget https://gist.githubusercontent.com/jessicah/5bc1da8f72ace11d77a42335951242e6/raw/0b5a25f45622df8c21397df561e562fed0e5166b/build_cross_tools_gcc4
chmod a+x build_cross_tools_gcc4
mkdir -p haiku-cross
./build_cross_tools_gcc4 x86_64-unknown-haiku ./haiku ./buildtools haiku-cross -j4
export PATH=$SCRATCH/haiku-cross/bin:$PATH
```

Install needed dependencies in haiku:
```
pkgman install llvm
```

Copying across a Haiku system to build our sysroot:
```
mkdir remote-haiku
mkdir -p haiku-cross/sysroot/boot/system/develop/headers
mkdir -p haiku-cross/sysroot/boot/system/develop/lib
mkdir -p haiku-cross/sysroot/boot/system/develop/tools
sudo sshfs -o follow_symlinks,allow_other,IdentityFile=$HOME/.ssh/id_rsa user@$IP_ADDRESS:/ remote-haiku
cp -rfP remote-haiku/boot/system/develop/headers/* haiku-cross/sysroot/boot/system/develop/headers/
cp -rfP remote-haiku/boot/system/develop/lib/* haiku-cross/sysroot/boot/system/develop/lib/
mkdir haiku-cross/sysroot/boot/system/develop/tools
cp -rfP remote-haiku/boot/system/develop/tools/* haiku-cross/sysroot/boot/system/develop/tools/
cd $SCRATCH/haiku-cross/sysroot/boot/system/develop/lib
ln -s ../tools/lib/gcc/x86_64-unknown-haiku x86_64-unknown-haiku
ln -s /bin/true $SCRATCH/haiku-cross/sysroot/boot/system/bin/FileCheck
export PATH=$PATH:$SCRATCH/haiku-cross/bin
```

Other Notes of Importance
-------------------------

Notes from previous notes and build attempts:

1. Running the `rustc` cross-compiler:
   ```
   LD_LIBRARY_PATH=build/x86_64-unknown-linux-gnu/stage2/lib \
     ./build/x86_64-unknown-linux-gnu/stage2/bin/rustc -v --target x86_64-unknown-haiku hello.rs
   ```
2. Verifying correctly linked binary:
   ```
   readelf -d hello
   # example output
   Dynamic section at offset 0xe4810 contains 22 entries:
     Tag        Type                         Name/Value
   0x0000000000000001 (NEEDED)             Shared library: [libroot.so]
   0x0000000000000001 (NEEDED)             Shared library: [libnetwork.so]
   0x0000000000000001 (NEEDED)             Shared library: [libgcc_s.so.1]
   ```
3. Building the rust cross-compiler:
   ```
   CC=clang CXX=clang++ ./x.py dist --target x86_64-unknown-haiku --host x86_64-unknown-linux-gnu
   # we can also use --host x86_64-unknown-haiku to build a rustc that runs on Haiku
   ```

There are also some other tricks to building the cross-compiler. One of these is to create a shim for `llvm-config`. In
this case, I just create a shell script, copy the output from llvm-config for each of the output flags on Haiku, and
paste these into the shell script, and adjust the paths to be sub-directories of our sysroot.

I still haven't succeeded at cross-compiling `cargo` for Haiku, but from reading up on the `gcc-rs` project, it seems
this should be doable by setting about a dozen environment variables. The [README](https://github.com/alexcrichton/gcc-rs)
goes into sufficient detail about how this works, but I haven't attempted this just yet.

There are a number of modules/crates that need Haiku support added before they'll compile correctly. I find the easiest
approach to this is to checkout the needed repos into a subfolder I called `vendor`, and add a `[replace]` section in the
`Cargo.toml` file, e.g.:
   ```
   [replace]
   "curl:0.4.6" = { path = "vendor/curl-rust" }
   "curl-sys:0.3.10" = { path = "vendor/curl-rust/curl-sys" }
   ```

To avoid `cargo` cross-compiling OpenSSL, we can also run `make` like so:
   ```
   OPENSSL_LIB_DIR=$SYSROOT/boot/system/develop/lib OPENSSL_INCLUDE_DIR=$SYSROOT/boot/system/develop/headers \
     VERBOSE=1 make
   ```

Also, when invoking `configure` for `cargo`, you need to use the `rustc` you cross-compiled, as it checks that the compiler
is the same build as used for building the crates. If they're not, it will complain that they're not compatible.
